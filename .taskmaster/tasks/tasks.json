{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository",
        "description": "Initialize the project repository with version control and basic structure.",
        "details": "Create a Git repository for the project. Set up the initial directory structure with folders for frontend, backend, and shared assets. Initialize a README file with project overview and setup instructions.",
        "testStrategy": "Verify repository accessibility and correct directory structure.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Git Repository",
            "description": "Initialize a new Git repository for the project.",
            "dependencies": [],
            "details": "Use the command line to navigate to the desired directory and run 'git init' to create a new Git repository. Ensure that Git is installed and configured on your system.",
            "status": "done",
            "testStrategy": "Verify that the '.git' directory is created and that Git commands like 'git status' work without errors."
          },
          {
            "id": 2,
            "title": "Set Up Initial Directory Structure",
            "description": "Create the initial directory structure with folders for frontend, backend, and shared assets.",
            "dependencies": [],
            "details": "Within the root of the repository, create three main directories: 'frontend', 'backend', and 'shared'. Use command line or file explorer to create these directories.",
            "status": "done",
            "testStrategy": "Check that the directories 'frontend', 'backend', and 'shared' exist in the root of the repository."
          },
          {
            "id": 3,
            "title": "Initialize README File",
            "description": "Create a README file with a project overview and setup instructions.",
            "dependencies": [],
            "details": "In the root directory, create a 'README.md' file. Include a brief project overview, purpose, and basic setup instructions. Use Markdown syntax for formatting.",
            "status": "done",
            "testStrategy": "Open the README file in a Markdown viewer to ensure proper formatting and readability."
          },
          {
            "id": 4,
            "title": "Add .gitignore File",
            "description": "Create a .gitignore file to exclude unnecessary files from version control.",
            "dependencies": [],
            "details": "Create a '.gitignore' file in the root directory. Include common patterns to ignore, such as 'node_modules/', '.env', and 'dist/'. Customize based on project needs.",
            "status": "done",
            "testStrategy": "Add a test file matching a pattern in .gitignore and verify it is not tracked by Git."
          },
          {
            "id": 5,
            "title": "Commit Initial Setup",
            "description": "Make the initial commit with the basic project setup.",
            "dependencies": [],
            "details": "Stage all files using 'git add .' and commit them with a message like 'Initial project setup'. Ensure all necessary files are included.",
            "status": "done",
            "testStrategy": "Run 'git log' to verify the commit is recorded with the correct message."
          },
          {
            "id": 6,
            "title": "Set Up Remote Repository",
            "description": "Link the local repository to a remote repository on a platform like GitHub.",
            "dependencies": [],
            "details": "Create a new repository on GitHub. Use 'git remote add origin <repository-url>' to link the local repo to the remote. Push the initial commit using 'git push -u origin main'.",
            "status": "done",
            "testStrategy": "Check the remote repository on GitHub to ensure the initial commit and files are present."
          },
          {
            "id": 7,
            "title": "Configure Branch Protection Rules",
            "description": "Set up branch protection rules to ensure code quality and prevent accidental changes to the main branch.",
            "dependencies": [],
            "details": "In the GitHub repository settings, navigate to 'Branches' and configure protection rules for the main branch. Require pull request reviews and status checks before merging.",
            "status": "done",
            "testStrategy": "Attempt to push directly to the main branch to verify that the protection rules are enforced."
          },
          {
            "id": 8,
            "title": "Document Repository Setup Process",
            "description": "Document the steps taken to set up the repository for future reference.",
            "dependencies": [],
            "details": "Update the README or create a separate documentation file detailing the repository setup process, including commands used and configurations made.",
            "status": "done",
            "testStrategy": "Review the documentation for completeness and accuracy. Ensure it can be followed to replicate the setup."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Name Input Parsing",
        "description": "Develop the system to parse and validate name inputs with optional weights.",
        "details": "Create a function to parse input strings in the format 'name*weight'. Validate entries for correct format, handle duplicates, and normalize weights. Use regular expressions for parsing and validation.",
        "testStrategy": "Unit tests for various input scenarios including edge cases and invalid formats.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define TypeScript Type Definitions",
            "description": "Create TypeScript type definitions for name and weight inputs to ensure type safety.",
            "dependencies": [],
            "details": "Define a TypeScript interface or type alias for the input format, such as 'name*weight'. Ensure that the type definitions cover both the name and weight components, and consider optional weights.\n<info added on 2025-08-23T08:47:53.679Z>\nImplementation completed: Created comprehensive TypeScript type definitions in shared/types/nameParser.ts with interfaces for ParticipantEntry, ParsedParticipants, ParsingOptions, ValidationError, and ParsingResult. Documentation created at .taskmaster/docs/task-explanations/task-2.1-typescript-definitions.md explaining the implementation in plain language for non-developers.\n</info added on 2025-08-23T08:47:53.679Z>",
            "status": "done",
            "testStrategy": "Verify type definitions by using them in a sample function and checking for type errors during compilation."
          },
          {
            "id": 2,
            "title": "Implement Parsing Function with Regular Expressions",
            "description": "Develop a function to parse input strings using regular expressions to extract names and weights.",
            "dependencies": [
              "2.1"
            ],
            "details": "Use regular expressions to identify and extract the 'name' and 'weight' components from input strings. Ensure the function can handle inputs with and without weights, and return a structured object based on the defined TypeScript types.\n<info added on 2025-08-23T09:55:56.366Z>\nImplementation completed: Created comprehensive parsing functions in shared/nameParser.ts with regex patterns for name*weight format. Implemented parseSingleInput(), parseNameInputs(), parseNameString(), and normalizeWeights() functions with full error handling, duplicate management, and edge case coverage. Supports multiple input formats and separators.\n</info added on 2025-08-23T09:55:56.366Z>",
            "status": "done",
            "testStrategy": "Write unit tests to check the parsing function against various input scenarios, including valid and invalid formats."
          },
          {
            "id": 3,
            "title": "Validate Input Format and Handle Errors",
            "description": "Add validation logic to ensure inputs conform to the expected format and handle errors gracefully.",
            "dependencies": [
              "2.2"
            ],
            "details": "Implement validation checks within the parsing function to confirm that inputs match the 'name*weight' format. Throw descriptive errors for invalid inputs and ensure the function handles these errors without crashing.\n<info added on 2025-08-23T10:02:22.236Z>\nEnhanced validation includes comprehensive input checks with security measures, improved error messages offering helpful suggestions, and enforcement of length and content limits. Developed a utility file, validationHelpers.ts, to facilitate batch validation and generate error suggestions. Strengthened defenses against malicious inputs and ensured user-friendly error guidance.\n</info added on 2025-08-23T10:02:22.236Z>",
            "status": "done",
            "testStrategy": "Test validation logic by providing malformed inputs and verifying that appropriate errors are thrown."
          },
          {
            "id": 4,
            "title": "Implement Duplicate Handling Logic",
            "description": "Develop logic to identify and handle duplicate name entries, ensuring unique names in the parsed output.",
            "dependencies": [
              "2.3"
            ],
            "details": "After parsing and validating inputs, check for duplicate names in the parsed data. Implement a strategy to handle duplicates, such as merging weights or discarding duplicates, based on project requirements.\n<info added on 2025-08-23T10:08:16.437Z>\nEnhanced the existing implementation with additional utilities in duplicateHandling.ts, including duplicate detection, resolution suggestions, merge functions, and statistics tracking. Added default case handling and improved error robustness. The system now supports 'merge', 'replace', and 'error' strategies for duplicate names.\n</info added on 2025-08-23T10:08:16.437Z>",
            "status": "done",
            "testStrategy": "Create tests with duplicate name entries to ensure the handling logic works as expected and duplicates are managed correctly."
          },
          {
            "id": 5,
            "title": "Normalize Weights",
            "description": "Add functionality to normalize weights across all parsed entries to ensure they sum to a consistent value.",
            "dependencies": [
              "2.4"
            ],
            "details": "Implement a normalization function that adjusts weights so that the total weight sums to a predefined value, such as 1 or 100. This function should be called after parsing and duplicate handling.\n<info added on 2025-08-23T10:11:33.429Z>\nEnhanced the existing `normalizeWeights` function and created specialized racing normalization utilities in `weightNormalization.ts`. Added integer-based car count normalization using the largest remainder method, probability calculations, and integrated these with the main parsing flow. The system now supports both mathematical normalization (decimal weights) and racing-specific normalization (integer car counts).\n</info added on 2025-08-23T10:11:33.429Z>",
            "status": "done",
            "testStrategy": "Test the normalization process by providing inputs with varying weights and verifying that the output weights are correctly normalized."
          }
        ]
      },
      {
        "id": 3,
        "title": "Develop Basic Race Mechanics",
        "description": "Implement the core race mechanics with a single oval track and AI-controlled cars.",
        "details": "Use React Three Fiber for 3D rendering and Rapier for physics. Implement AI-controlled cars with identical parameters and a simple oval track. Ensure consistent physics and fair AI behavior.",
        "testStrategy": "Simulate races to ensure fair AI behavior and consistent physics.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up React Three Fiber Environment",
            "description": "Initialize a React project and configure React Three Fiber for 3D rendering.",
            "dependencies": [],
            "details": "Create a new React application using Create React App or a similar tool. Install React Three Fiber and set up a basic scene with a camera and lighting to ensure the 3D environment is ready for further development.\n<info added on 2025-08-23T12:11:32.725Z>\nReact Three Fiber environment setup completed successfully. Created a Vite-based React TypeScript project with @react-three/fiber, @react-three/drei, and three.js dependencies. Implemented basic 3D scene with lighting, camera controls, animated test objects (cube, sphere, cylinder), and ground plane. Development server running at localhost:3000 with working 3D environment ready for race mechanics implementation.\n</info added on 2025-08-23T12:11:32.725Z>",
            "status": "done",
            "testStrategy": "Render a simple 3D object to verify the setup."
          },
          {
            "id": 2,
            "title": "Integrate Rapier Physics Engine",
            "description": "Add Rapier physics engine to the project for handling physics simulations.",
            "dependencies": [
              "3.1"
            ],
            "details": "Install Rapier and integrate it with the React Three Fiber setup. Configure basic physics properties such as gravity and collision detection to ensure the environment is ready for dynamic interactions.\n<info added on 2025-08-23T12:17:21.779Z>\nRapier physics engine integration completed successfully. Installed @react-three/rapier and @dimforge/rapier3d-compat packages. Set up physics world with gravity (-9.81), enabled debug mode for visualization. Created physics-enabled objects (cube, sphere, cylinder) that fall and collide with static ground plane. Implemented RigidBody components with collision detection, restitution values, and proper colliders. Physics simulation is running smoothly at localhost:3000.\n</info added on 2025-08-23T12:17:21.779Z>",
            "status": "done",
            "testStrategy": "Simulate a basic physics scenario to verify integration."
          },
          {
            "id": 3,
            "title": "Design Oval Track Model",
            "description": "Create a 3D model of a simple oval track for the race.",
            "dependencies": [
              "3.1"
            ],
            "details": "Use a 3D modeling tool like Blender to design an oval track. Export the model in a format compatible with React Three Fiber, such as GLTF or OBJ, and import it into the project.\n<info added on 2025-08-23T12:23:32.673Z>\nOval track model design completed successfully. Created a programmatic Track component using Three.js geometry instead of external 3D modeling software. Implemented an oval track with configurable dimensions (inner/outer radius, track width, height), proper physics barriers (red outer, blue inner), track surface with realistic materials, start/finish line markings, and center lane divider. Track integrated into the Scene with test car-shaped objects for collision testing. Camera repositioned for optimal track viewing.\n</info added on 2025-08-23T12:23:32.673Z>",
            "status": "done",
            "testStrategy": "Render the track in the scene to ensure correct loading and positioning."
          },
          {
            "id": 4,
            "title": "Implement Track Physics",
            "description": "Apply physics properties to the oval track to enable interaction with AI cars.",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "details": "Use Rapier to add collision detection and friction properties to the track surface. Ensure that the track can interact with dynamic objects like AI cars.",
            "status": "done",
            "testStrategy": "Test collision and friction by simulating a simple object moving on the track."
          },
          {
            "id": 5,
            "title": "Develop AI Car Model",
            "description": "Create a 3D model for the AI-controlled cars.",
            "dependencies": [
              "3.1"
            ],
            "details": "Design a basic car model using a 3D modeling tool. Ensure the model is optimized for performance and export it in a compatible format for React Three Fiber.",
            "status": "done",
            "testStrategy": "Render the car model in the scene to verify appearance and scale."
          },
          {
            "id": 6,
            "title": "Implement AI Car Physics",
            "description": "Apply physics properties to the AI car model to enable realistic movement.",
            "dependencies": [
              "3.2",
              "3.5"
            ],
            "details": "Use Rapier to add mass, velocity, and collision properties to the car model. Ensure the car can move and interact with the track and other cars.\n<info added on 2025-08-24T05:08:31.850Z>\nPhysicsCar component completed: Realistic physics engine implementation finished\n- Added physical properties such as engine power, max speed, rotation speed, and braking force\n- Implemented keyboard controls (WASD + Space) and AI auto-control\n- Clarified car front direction with arrows, grille, and headlights\n- Adjusted forward direction vector based on the X-axis\n- Prepared for testing with cars positioned at the starting line on TestTrack\n\nThe physics engine is fully operational, and both keyboard and AI controls are implemented and ready for testing.\n</info added on 2025-08-24T05:08:31.850Z>\n<info added on 2025-08-25T14:09:58.184Z>\nPhysicsCar physics system improvements completed:\n\n1. **Resolved Minor Reversing Issue**:\n   - Increased dead zone from 0.04 to 0.06\n   - Expanded stop snap threshold from 0.03 to 0.08\n   - Reduced coasting brake strength from 0.25 to 0.15\n\n2. **Improved Steering Sensitivity**:\n   - Added a steering dead zone of 0.05\n   - Changed speed-based sensitivity to a power curve (^1.5)\n   - Ensured a minimum sensitivity of 20% at high speeds\n\n3. **Enhanced Physical Stability**:\n   - Increased linear damping from 0.1 to 0.25 (improved inertia feel)\n   - Increased angular damping from 3.0 to 4.0 (improved rotational stability)\n\n4. **Adjusted Acceleration Responsiveness**:\n   - Reduced acceleration ramp-up from 6.0 to 4.5 (smoother start)\n   - Increased deceleration ramp-down from 12.0 to 15.0 (quicker stop)\n\nResult: Resolved W key reversing issue, achieved smoother handling, and stable physical behavior.\n</info added on 2025-08-25T14:09:58.184Z>",
            "status": "done",
            "testStrategy": "Simulate car movement and collision with the track to verify physics behavior."
          },
          {
            "id": 7,
            "title": "Develop Basic AI Behavior",
            "description": "Implement basic AI logic to control car movement around the track.",
            "dependencies": [
              "3.6"
            ],
            "details": "Create a simple AI algorithm that controls car acceleration, steering, and braking to navigate the oval track. Ensure the AI can complete laps consistently.",
            "status": "pending",
            "testStrategy": "Run simulations to observe AI behavior and adjust parameters for consistent lap completion."
          },
          {
            "id": 8,
            "title": "Ensure Consistent Physics",
            "description": "Verify and adjust physics settings for consistent behavior across all AI cars.",
            "dependencies": [
              "3.4",
              "3.6"
            ],
            "details": "Review and fine-tune physics parameters such as friction, mass, and collision response to ensure all AI cars behave consistently and fairly.",
            "status": "pending",
            "testStrategy": "Conduct multiple race simulations to check for consistent physics across different scenarios."
          },
          {
            "id": 9,
            "title": "Implement Lap Timing System",
            "description": "Develop a system to track and display lap times for AI cars.",
            "dependencies": [
              "3.7"
            ],
            "details": "Create a timing mechanism that records lap times for each AI car. Display the times on the screen using a simple UI component.",
            "status": "pending",
            "testStrategy": "Verify lap timing accuracy by comparing with manual timing."
          },
          {
            "id": 10,
            "title": "Create Race Start and Finish Logic",
            "description": "Implement logic to handle race start, lap counting, and race finish.",
            "dependencies": [
              "3.9"
            ],
            "details": "Develop a system to manage race start conditions, track lap counts for each car, and determine the race finish based on lap completion.",
            "status": "pending",
            "testStrategy": "Simulate full races to ensure correct start, lap counting, and finish detection."
          },
          {
            "id": 11,
            "title": "Develop Basic UI for Race Information",
            "description": "Create a user interface to display race information such as positions and lap times.",
            "dependencies": [
              "3.9",
              "3.10"
            ],
            "details": "Design and implement a simple UI overlay that shows real-time race information, including car positions, lap times, and race status.",
            "status": "pending",
            "testStrategy": "Check UI responsiveness and accuracy during race simulations."
          },
          {
            "id": 12,
            "title": "Conduct Comprehensive Testing",
            "description": "Perform thorough testing of all race mechanics to ensure functionality and fairness.",
            "dependencies": [
              "3.8",
              "3.10",
              "3.11"
            ],
            "details": "Run extensive simulations to test all aspects of the race mechanics, including AI behavior, physics consistency, and UI accuracy. Identify and fix any issues that arise.",
            "status": "pending",
            "testStrategy": "Use automated and manual testing methods to validate all race mechanics and ensure fair AI behavior."
          },
          {
            "id": 13,
            "title": "Create Track Waypoint System",
            "description": "Design and implement waypoint system for AI navigation around the track",
            "details": "Create a waypoint-based navigation system for the oval track. Define waypoint data structure with position, target speed, radius, and type information. Generate waypoints programmatically along the track path with appropriate spacing and curvature information for corners.\n<info added on 2025-08-25T14:15:36.423Z>\nWaypoint system implementation completed successfully:\n\nCore Features Implemented:\n\n1. TrackWaypointSystem Class (utils/waypointSystem.ts):\n   - Programmatically generates waypoints for oval track geometry\n   - Supports configurable track dimensions matching Track.tsx\n   - Creates waypoints for straights and curves with proper spacing\n   - Calculates curvature-based target speeds using physics formula v = sqrt(a_lat/κ)\n   - Optimizes speeds with forward/backward passes for smooth transitions\n   - Provides comprehensive waypoint data: position, speed, curvature, normals, directions\n\n2. Waypoint Data Structure:\n   - Position (Vector3) for 3D coordinates\n   - Target speed based on track curvature and lateral acceleration limits\n   - Curvature information (1/radius) for physics-based speed calculation\n   - Direction vectors for car orientation\n   - Left/right normals for lane offset calculations\n   - Distance tracking and section progress\n\n3. WaypointFollower Utility:\n   - Provides AI car integration interface\n   - Supports dynamic lane offset for overtaking (-1 to +1)\n   - Automatic waypoint progression based on car position\n   - Target speed retrieval for speed control\n\n4. Visual Debugging System (WaypointVisualizer.tsx):\n   - Color-coded waypoint visualization (green=start/finish, blue=straight, red-yellow=corner speed)\n   - Racing line display as white line\n   - Optional speed indicators, direction arrows, lane normals\n   - Real-time debug information panel\n\n5. Integration Component (TestTrackWithWaypoints.tsx):\n   - Complete testing environment with oval track + waypoints\n   - 4-car starting grid positioned at start/finish line\n   - Player-controlled car (blue) + 3 AI cars\n   - Interactive debug controls and performance metrics\n\nTechnical Implementation:\n\n- Track Geometry Matching: Waypoints perfectly follow Track.tsx geometry (straight sections + semicircle curves)\n- Physics-Based Speed Control: Uses v_target = sqrt(a_lat_max / κ) with configurable max lateral acceleration\n- Smooth Speed Transitions: Forward/backward optimization passes prevent abrupt speed changes\n- Lane Offset Support: Left/right normal vectors enable AI overtaking behaviors\n- Configurable Parameters: Adjustable spacing, speed limits, corner factors\n- Performance Optimized: Efficient waypoint lookup and distance calculations\n\nApp Integration:\n\nUpdated App.tsx to showcase the new waypoint system with the oval track, providing a complete testing environment for AI development. The system is ready for Task 3.14 (PID controller implementation).\n\nFiles Created:\n- frontend/src/components/3d/utils/waypointSystem.ts - Core waypoint system\n- frontend/src/components/3d/WaypointVisualizer.tsx - Visual debugging component  \n- frontend/src/components/3d/TestTrackWithWaypoints.tsx - Integration test environment\n</info added on 2025-08-25T14:15:36.423Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 14,
            "title": "Implement Pure Pursuit Steering Controller",
            "description": "Create Pure Pursuit controller with lookahead-based curvature and yaw-rate limiting",
            "details": "Implement a Pure Pursuit controller for AI steering. Compute a lookahead point along the waypoint path with Ld = clamp(L0 + kV*|v|, LdMin, LdMax). Derive curvature κ = 2*sin(α)/Ld and target yaw-rate r = v*κ. Apply yaw-rate saturation |r| ≤ rMax and rate limit |dr/dt| ≤ rRate. Clamp lateral acceleration with μ·g by limiting v and r accordingly. Control throttle via simple P-control to track v_target = min(waypoint targetSpeed, sqrt(μ*g/|κ|)).",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Create Seed Commit/Reveal System",
        "description": "Implement the seed commit/reveal system for fairness verification.",
        "details": "Develop a system to generate a SHA256 hash of the seed (serverSalt + entrants + timestamp) before the race. Reveal the original seed after the race for verification purposes.",
        "testStrategy": "Verify hash generation and seed reveal process through unit tests and manual verification.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Seed Structure",
            "description": "Define the structure of the seed, which includes serverSalt, entrants, and timestamp.",
            "dependencies": [],
            "details": "Create a data structure to hold the serverSalt, entrants, and timestamp. Ensure that this structure can be easily serialized for hash generation.",
            "status": "pending",
            "testStrategy": "Verify that the seed structure correctly holds and serializes the required data."
          },
          {
            "id": 2,
            "title": "Implement SHA256 Hash Generation",
            "description": "Develop a function to generate a SHA256 hash from the seed.",
            "dependencies": [
              "4.1"
            ],
            "details": "Use a cryptographic library to implement a function that takes the seed structure, serializes it, and returns a SHA256 hash.",
            "status": "pending",
            "testStrategy": "Test the hash generation with known inputs to ensure it produces the correct hash."
          },
          {
            "id": 3,
            "title": "Store Hash Before Race",
            "description": "Store the generated hash securely before the race begins.",
            "dependencies": [
              "4.2"
            ],
            "details": "Implement a mechanism to store the hash in a secure and immutable manner, such as in a database or a blockchain.",
            "status": "pending",
            "testStrategy": "Verify that the hash is stored correctly and cannot be altered after storage."
          },
          {
            "id": 4,
            "title": "Design Seed Reveal Mechanism",
            "description": "Design a mechanism to reveal the original seed after the race.",
            "dependencies": [
              "4.1"
            ],
            "details": "Create a process to securely retrieve and display the original seed to participants for verification purposes.",
            "status": "pending",
            "testStrategy": "Ensure that the seed can be retrieved and matches the stored hash when revealed."
          },
          {
            "id": 5,
            "title": "Implement Seed Reveal Functionality",
            "description": "Implement the functionality to reveal the seed after the race.",
            "dependencies": [
              "4.4"
            ],
            "details": "Develop the code to execute the seed reveal process, ensuring it is triggered at the correct time and securely displays the seed.",
            "status": "pending",
            "testStrategy": "Test the reveal process to ensure it occurs only after the race and displays the correct seed."
          },
          {
            "id": 6,
            "title": "Integrate with Race Management System",
            "description": "Integrate the commit/reveal system with the existing race management system.",
            "dependencies": [
              "4.3",
              "4.5"
            ],
            "details": "Ensure that the commit/reveal system is seamlessly integrated with the race management system, triggering hash storage and seed reveal at appropriate times.",
            "status": "pending",
            "testStrategy": "Simulate a race to verify that the commit and reveal processes are correctly integrated and function as expected."
          },
          {
            "id": 7,
            "title": "Develop User Interface for Verification",
            "description": "Create a user interface to allow participants to verify the seed and hash.",
            "dependencies": [
              "4.5"
            ],
            "details": "Design and implement a UI component that displays the seed and hash, allowing users to verify the fairness of the race.",
            "status": "pending",
            "testStrategy": "Conduct user testing to ensure the UI is intuitive and correctly displays the necessary information for verification."
          },
          {
            "id": 8,
            "title": "Conduct Security Audit",
            "description": "Perform a security audit of the commit/reveal system to ensure data integrity and security.",
            "dependencies": [
              "4.6",
              "4.7"
            ],
            "details": "Review the entire system for potential vulnerabilities, focusing on data storage, hash generation, and seed reveal processes.",
            "status": "pending",
            "testStrategy": "Use security testing tools and manual review to identify and address any security issues."
          }
        ]
      },
      {
        "id": 5,
        "title": "Integrate OBS Browser Source Compatibility",
        "description": "Ensure the application can be used as a browser source in OBS for streaming.",
        "details": "Implement features to support transparent backgrounds and 1080p/60fps presets. Test integration with OBS to ensure seamless streaming.",
        "testStrategy": "Test OBS integration by setting up a stream and verifying video quality and transparency.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Basic Replay Functionality",
        "description": "Develop a system to record and replay races.",
        "details": "Create a mechanism to record race data and allow users to replay races. Store race data in a format that can be easily replayed and verified.",
        "testStrategy": "Test replay functionality by recording and replaying multiple races, ensuring accuracy and consistency.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Setup Frontend with React Three Fiber",
        "description": "Initialize the frontend using React Three Fiber for 3D rendering.",
        "details": "Set up a React application with React Three Fiber and drei helpers for 3D rendering. Configure Tailwind CSS for styling.",
        "testStrategy": "Verify the setup by rendering a basic 3D scene and checking for any rendering issues.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize React Application",
            "description": "Set up a new React application using Create React App.",
            "dependencies": [],
            "details": "Use the command 'npx create-react-app my-app' to initialize a new React project. Ensure the project is set up in the correct directory structure as defined in Task 1.",
            "status": "pending",
            "testStrategy": "Verify that the React application runs successfully with 'npm start'."
          },
          {
            "id": 2,
            "title": "Install React Three Fiber",
            "description": "Add React Three Fiber to the React application for 3D rendering capabilities.",
            "dependencies": [
              "7.1"
            ],
            "details": "Run 'npm install @react-three/fiber' to add React Three Fiber to the project.",
            "status": "pending",
            "testStrategy": "Check that the package is listed in package.json and can be imported without errors."
          },
          {
            "id": 3,
            "title": "Install Drei Helpers",
            "description": "Install Drei, a collection of useful helpers for React Three Fiber.",
            "dependencies": [
              "7.2"
            ],
            "details": "Execute 'npm install @react-three/drei' to include Drei helpers in the project.",
            "status": "pending",
            "testStrategy": "Ensure that Drei components can be imported and used in the project."
          },
          {
            "id": 4,
            "title": "Configure Tailwind CSS",
            "description": "Set up Tailwind CSS for styling the React application.",
            "dependencies": [
              "7.1"
            ],
            "details": "Follow the Tailwind CSS installation guide for Create React App. Install Tailwind CSS and its dependencies, then configure the tailwind.config.js file.",
            "status": "pending",
            "testStrategy": "Verify that Tailwind CSS styles are applied correctly by adding a sample styled component."
          },
          {
            "id": 5,
            "title": "Create Basic 3D Scene",
            "description": "Implement a basic 3D scene using React Three Fiber to verify the setup.",
            "dependencies": [
              "7.2",
              "7.3"
            ],
            "details": "Create a simple 3D scene with a cube using React Three Fiber. Use Drei helpers for lighting and camera controls.",
            "status": "pending",
            "testStrategy": "Render the scene and ensure the cube is displayed correctly with lighting effects."
          },
          {
            "id": 6,
            "title": "Set Up Project Structure for Components",
            "description": "Organize the project structure to accommodate 3D components and styling.",
            "dependencies": [
              "7.1"
            ],
            "details": "Create directories for components, styles, and assets. Ensure the structure supports easy scalability for future development.",
            "status": "pending",
            "testStrategy": "Check that the directory structure is clear and components are organized logically."
          },
          {
            "id": 7,
            "title": "Integrate Tailwind CSS with 3D Components",
            "description": "Apply Tailwind CSS styles to the 3D components to ensure consistent styling.",
            "dependencies": [
              "7.4",
              "7.6"
            ],
            "details": "Use Tailwind CSS classes to style the 3D scene and UI components. Ensure styles are responsive and visually appealing.",
            "status": "pending",
            "testStrategy": "Verify that styles are applied correctly and adjust as necessary for visual consistency."
          },
          {
            "id": 8,
            "title": "Implement Responsive Design",
            "description": "Ensure the 3D scene and UI are responsive across different screen sizes.",
            "dependencies": [
              "7.7"
            ],
            "details": "Use Tailwind CSS's responsive utilities to adjust the layout and styling for various screen sizes.",
            "status": "pending",
            "testStrategy": "Test the application on different devices and screen sizes to ensure responsiveness."
          },
          {
            "id": 9,
            "title": "Optimize Performance",
            "description": "Optimize the React Three Fiber setup for better performance.",
            "dependencies": [
              "7.5",
              "7.8"
            ],
            "details": "Implement performance optimizations such as lazy loading components and using React.memo where applicable.",
            "status": "pending",
            "testStrategy": "Use performance profiling tools to identify bottlenecks and verify improvements."
          },
          {
            "id": 10,
            "title": "Conduct Final Testing",
            "description": "Perform comprehensive testing of the setup to ensure all components work as expected.",
            "dependencies": [
              "7.9"
            ],
            "details": "Test the application thoroughly, including rendering, styling, and responsiveness. Address any issues found during testing.",
            "status": "pending",
            "testStrategy": "Conduct manual testing and use automated tests to verify the functionality and performance of the application."
          }
        ]
      },
      {
        "id": 8,
        "title": "Develop Backend API with Next.js",
        "description": "Create the backend API using Next.js route handlers or tRPC.",
        "details": "Set up a Next.js application with route handlers for API endpoints. Implement basic endpoints for race management and data retrieval.",
        "testStrategy": "Test API endpoints using Postman or similar tools to ensure correct responses and error handling.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js Application",
            "description": "Set up a new Next.js application to serve as the foundation for the backend API.",
            "dependencies": [],
            "details": "Use the Next.js CLI to create a new application. Ensure the environment is set up with Node.js and npm or yarn.",
            "status": "pending",
            "testStrategy": "Verify the application starts successfully and the default page loads in a browser."
          },
          {
            "id": 2,
            "title": "Configure TypeScript Support",
            "description": "Add TypeScript support to the Next.js application for type safety and better development experience.",
            "dependencies": [
              "8.1"
            ],
            "details": "Install TypeScript and necessary type definitions. Rename files to .ts or .tsx and configure tsconfig.json.",
            "status": "pending",
            "testStrategy": "Ensure the application compiles without errors and type checking is active."
          },
          {
            "id": 3,
            "title": "Set Up Basic API Route Structure",
            "description": "Create the basic folder structure for API routes in the Next.js application.",
            "dependencies": [
              "8.2"
            ],
            "details": "Inside the 'pages/api' directory, create subdirectories for different API resources such as 'races' and 'data'.",
            "status": "pending",
            "testStrategy": "Check that the folder structure is correctly set up and accessible."
          },
          {
            "id": 4,
            "title": "Implement Race Management Endpoints",
            "description": "Develop API endpoints for managing races, including creation, updating, and deletion.",
            "dependencies": [
              "8.3"
            ],
            "details": "Create route handlers in the 'pages/api/races' directory. Implement POST, PUT, and DELETE methods for race management.",
            "status": "pending",
            "testStrategy": "Use Postman to test each endpoint for correct functionality and error handling."
          },
          {
            "id": 5,
            "title": "Implement Data Retrieval Endpoints",
            "description": "Develop API endpoints for retrieving race data.",
            "dependencies": [
              "8.3"
            ],
            "details": "Create GET route handlers in the 'pages/api/data' directory to fetch race data.",
            "status": "pending",
            "testStrategy": "Test data retrieval endpoints using Postman to ensure data is returned correctly."
          },
          {
            "id": 6,
            "title": "Integrate tRPC for Type-Safe API Calls",
            "description": "Set up tRPC to enable type-safe API calls within the Next.js application.",
            "dependencies": [
              "8.2",
              "8.4",
              "8.5"
            ],
            "details": "Install tRPC and configure it in the Next.js application. Define procedures for existing endpoints.",
            "status": "pending",
            "testStrategy": "Verify type safety by checking for type errors during API calls in the development environment."
          },
          {
            "id": 7,
            "title": "Implement Authentication Middleware",
            "description": "Add middleware to handle authentication for API endpoints.",
            "dependencies": [
              "8.4",
              "8.5"
            ],
            "details": "Create middleware functions to check authentication tokens and apply them to relevant API routes.",
            "status": "pending",
            "testStrategy": "Test with valid and invalid tokens to ensure proper access control."
          },
          {
            "id": 8,
            "title": "Set Up Environment Variables",
            "description": "Configure environment variables for sensitive data and configuration settings.",
            "dependencies": [
              "8.1"
            ],
            "details": "Use a .env file to store environment variables and access them using process.env in the application.",
            "status": "pending",
            "testStrategy": "Ensure sensitive data is not hardcoded and variables are accessible in the application."
          },
          {
            "id": 9,
            "title": "Implement Error Handling",
            "description": "Add comprehensive error handling to API endpoints to manage and log errors effectively.",
            "dependencies": [
              "8.4",
              "8.5",
              "8.7"
            ],
            "details": "Use try-catch blocks and error logging libraries to handle and log errors in API routes.",
            "status": "pending",
            "testStrategy": "Simulate errors and verify that they are logged and handled gracefully."
          },
          {
            "id": 10,
            "title": "Deploy Next.js Application",
            "description": "Deploy the Next.js application to a cloud provider for public access.",
            "dependencies": [
              "8.6",
              "8.8",
              "8.9"
            ],
            "details": "Choose a cloud provider like Vercel or AWS, configure deployment settings, and deploy the application.",
            "status": "pending",
            "testStrategy": "Access the deployed application and test all API endpoints to ensure they function as expected."
          }
        ]
      },
      {
        "id": 9,
        "title": "Implement Database with PostgreSQL",
        "description": "Set up the database using PostgreSQL for production and SQLite for MVP.",
        "details": "Configure a PostgreSQL database using Supabase for production. Use SQLite for local development and testing. Define schema for race data and user management.",
        "testStrategy": "Test database operations by performing CRUD operations and verifying data integrity.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Develop Real-time Features with WebSockets",
        "description": "Implement real-time features using WebSockets for live race updates.",
        "details": "Use WebSockets or a service like Ably/Pusher to provide real-time updates during races. Ensure low latency and reliable connections.",
        "testStrategy": "Test real-time updates by simulating races and verifying timely updates on the client side.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Car Customization via Name Hashing",
        "description": "Auto-generate car colors based on participant names using hashing.",
        "details": "Use a hashing algorithm to map participant names to HSL color values for car customization. Ensure unique and visually distinct colors.",
        "testStrategy": "Test color generation by hashing a variety of names and verifying color uniqueness and consistency.",
        "priority": "low",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Develop Dynamic Camera System",
        "description": "Implement a dynamic camera system for race tracking and photo finishes.",
        "details": "Create a camera system that dynamically follows the race, provides photo-finish close-ups, and supports slow-motion replays. Use React Three Fiber for implementation.",
        "testStrategy": "Test camera behavior during races to ensure smooth transitions and accurate tracking.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Create User Authentication and Dashboard",
        "description": "Develop user authentication and a dashboard for managing races.",
        "details": "Implement user authentication using a library like Auth0 or Firebase. Create a dashboard for users to manage their races and view results.",
        "testStrategy": "Test authentication flows and dashboard functionality for usability and security.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Implement Multiple Track Presets",
        "description": "Develop multiple track presets for varied racing experiences.",
        "details": "Create additional track presets such as Neon City and Canyon Rally. Use procedural generation for track creation and ensure compatibility with existing race mechanics.",
        "testStrategy": "Test each track preset for playability and ensure consistent race mechanics across tracks.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Develop Advanced Race Modes",
        "description": "Implement advanced race modes like Podium, Knockout, and Relay.",
        "details": "Create additional race modes with specific rules and mechanics. Ensure each mode is distinct and offers a unique racing experience.",
        "testStrategy": "Test each race mode to ensure correct implementation of rules and mechanics.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Integrate Live Voting and Interaction Features",
        "description": "Add live voting and interaction features for audience participation.",
        "details": "Implement a system for live audience voting on race conditions or events. Use WebSockets for real-time interaction and updates.",
        "testStrategy": "Test live voting features by simulating audience interactions and verifying real-time updates.",
        "priority": "low",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Develop Comprehensive Documentation",
        "description": "Create detailed documentation for setup, usage, and fairness verification.",
        "details": "Write comprehensive documentation covering all aspects of the application, including setup guides, usage instructions, and fairness verification processes.",
        "testStrategy": "Review documentation for completeness and clarity. Conduct user testing to ensure usability.",
        "priority": "low",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Security Measures",
        "description": "Ensure security and privacy measures are in place for data protection.",
        "details": "Implement input validation, rate limiting, and secure random generation. Ensure API security with authentication and authorization.",
        "testStrategy": "Conduct security testing including penetration tests and vulnerability assessments.",
        "priority": "high",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Setup Analytics and Insights",
        "description": "Implement analytics to track usage, engagement, and performance metrics.",
        "details": "Use tools like Google Analytics or a custom solution to track key metrics. Ensure data is collected and reported accurately.",
        "testStrategy": "Verify analytics data accuracy by comparing with expected results and conducting manual checks.",
        "priority": "low",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Prepare for MVP Launch",
        "description": "Finalize preparations for the MVP launch including marketing and community engagement.",
        "details": "Coordinate with marketing teams for content creator outreach and educational market penetration. Set up community channels for feedback and support.",
        "testStrategy": "Review launch preparations and conduct a soft launch to gather initial feedback.",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Develop Comprehensive AI System for Minicar Racing",
        "description": "Implement an AI system with state machine, raycast sensors, and advanced behaviors for minicar racing.",
        "details": "Develop an AI system for minicar racing that includes a state machine to manage different racing states such as overtaking, avoiding, cornering, and recovery. Use raycast sensors to detect track boundaries, other cars, and obstacles. Implement advanced behaviors to ensure the AI can handle complex racing scenarios, providing exciting and competitive races. The AI should be deterministic to ensure fairness and reproducibility, allowing for verification of race outcomes. Consider using a combination of physics-based and rule-based approaches to achieve realistic and competitive AI behavior. Integrate the AI system with the existing race mechanics and ensure compatibility with various track presets.",
        "testStrategy": "Conduct extensive simulations to test AI behavior in different racing scenarios, including overtaking, avoiding collisions, and cornering. Verify the determinism of the AI by running identical simulations and ensuring consistent outcomes. Test the AI's interaction with different track presets and race modes to ensure adaptability and fairness. Use logging and debugging tools to analyze AI decision-making processes and refine behaviors as necessary.",
        "status": "pending",
        "dependencies": [
          3,
          14
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Design AI State Machine Architecture",
            "description": "Create the core state machine with Racing, Cornering, Overtaking, Avoiding, and Recovery states",
            "details": "Design and implement a finite state machine with 5 core states: START, RACING (default), CORNERING (curve navigation), OVERTAKING (passing other cars), AVOIDING (collision avoidance), and RECOVER (stuck/spin recovery). Define state transition conditions with priority hierarchy: RECOVER > AVOIDING > OVERTAKING > CORNERING > RACING. Include cooldown mechanisms and minimum state duration to prevent state thrashing.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 2,
            "title": "Implement Raycast Sensor System",
            "description": "Create multi-directional raycast sensors for environment detection and collision avoidance",
            "details": "Implement a raycast sensor system with 5-7 rays: forward (center, ±10°, ±20°) and lateral (±80°) for comprehensive environment sensing. Configure dynamic sensor range based on speed (R = 8 + 0.6*speed, clamped 6-18m). Optimize performance by running sensors at 30-60Hz instead of full physics rate. Include hit detection for other cars, track boundaries, and obstacles with distance and object type information.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 3,
            "title": "Develop Virtual Lane Offset System",
            "description": "Implement dynamic lane positioning for overtaking and avoidance maneuvers",
            "details": "Create a virtual lane offset system that modifies waypoint following by adding perpendicular displacement. Implement smooth offset transitions using easing functions (τ=0.3-0.5s) to prevent sudden lane changes. Support ±0.8m offset for overtaking and ±0.4m for minor avoidance. Include safety checks to ensure adequate clearance before applying offsets and integrate with the state machine for automatic offset management.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 4,
            "title": "Implement Curvature-Based Speed Control",
            "description": "Create physics-based speed management system for different track sections",
            "details": "Implement curvature-based speed control using the formula v_target = sqrt(a_lat_max / κ) where κ is curvature (1/R) and a_lat_max is maximum lateral acceleration (6-8 m/s²). Add curvature information to waypoint data structure and calculate appropriate target speeds for corners. Include progressive braking before corners and acceleration out of corners with smooth speed transitions to prevent abrupt speed changes.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 5,
            "title": "Create Overtaking Logic System",
            "description": "Implement intelligent overtaking behavior with safety checks and decision making",
            "details": "Develop overtaking logic that triggers when front car distance < 5-8m and relative speed advantage exists. Include lateral safety checks using raycast sensors to ensure clear overtaking space. Implement overtaking cooldown (2s) and failure handling (retry limits). Add overtaking completion detection and automatic return to racing line. Ensure overtaking attempts respect track boundaries and other traffic conditions.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 6,
            "title": "Implement Collision Avoidance System",
            "description": "Create emergency avoidance behaviors for collision prevention",
            "details": "Implement two-tier collision avoidance: Comfort Brake (distance 40-80% of sensor range) and Panic Brake (distance <40% of sensor range). Add lateral avoidance with minor lane offset when safe space is available. Include collision prediction algorithms based on relative velocity and trajectory. Implement avoidance state exit conditions with 0.2s minimum clear time before returning to racing state.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 7,
            "title": "Create Recovery System for Stuck Cars",
            "description": "Implement automatic recovery system for cars that get stuck or spin out",
            "details": "Develop recovery state that triggers when car speed < 0.3 m/s for 1.2s+ with heading angle >60° from waypoint direction, or when car is in contact with walls for 1.0s+. Implement recovery actions: throttle cutoff, light braking, yaw correction torque, and limited reverse movement if necessary. Include automatic exit conditions when heading error <15° and speed recovery. Add deterministic recovery behavior to maintain race reproducibility.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 8,
            "title": "Implement Seed-Based AI Personalization",
            "description": "Create deterministic AI personality variations while maintaining fairness",
            "details": "Implement seed-based AI personalization system that generates unique but fair AI parameters for each car. Use hash(carName + globalSeed) to create deterministic variations in aggressiveness (±10%), braking skill (±5%), cornering ability (±10%), and reaction time (±25ms). Ensure all variations stay within acceptable performance bounds to maintain fairness. Include parameter validation and logging for race reproducibility verification.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-22T10:24:46.700Z",
      "updated": "2025-08-25T14:15:42.347Z",
      "description": "Tasks for master context"
    }
  }
}
